import { OnInit, OnChanges, SimpleChanges, OnDestroy, EventEmitter } from '@angular/core';
import { PagesLoadedEvent } from './pages-loaded-event';
import { PageRenderedEvent } from './page-rendered-event';
export declare class NgxExtendedPdfViewerComponent implements OnInit, OnChanges, OnDestroy {
    static ngxExtendedPdfViewerInitialized: boolean;
    private _src;
    private resizeTimeout;
    /**
     * Number of milliseconds to wait between initializing the PDF viewer and loading the PDF file.
     * Most users can let this parameter safely at it's default value of zero.
     * Set this to 1000 or higher if you run into timing problems (typically caused by loading the locale files
     * after the PDF files, so they are not available when the PDF viewer is initialized).
     */
    delayFirstView: number;
    /** store the timeout id so it can be canceled if user leaves the page before the PDF is shown */
    private initTimeout;
    primaryMenuVisible: boolean;
    src: string | ArrayBuffer | Uint8Array;
    base64Src: string;
    minHeight: string | undefined;
    private _height;
    height: string;
    /**
     * If this flag is true, this components adds a link to the locale assets. The pdf viewer
     * sees this link and uses it to load the locale files automatically.
     * @param useBrowserLocale boolean
     */
    useBrowserLocale: boolean;
    backgroundColor: string;
    /** Allows the user to define the name of the file after clicking "download" */
    filenameForDownload: string;
    /** Override the default locale. This must be the complete locale name, such as "es-ES". The string is allowed to be all lowercase.
     */
    language: string | undefined;
    /** By default, listening to the URL is deactivated because often the anchor tag is used for the Angular router */
    listenToURL: boolean;
    /** Navigate to a certain "named destination" */
    nameddest: string | undefined;
    /** allows you to pass a password to read password-protected files */
    password: string | undefined;
    _showSidebarButton: boolean;
    viewerPositionTop: string;
    showSidebarButton: boolean;
    /** If [showSideBarButton]="true", do you want the sidebar to be shown by default ([showSidebarOnLoad])="true")
     * or not? By default, this flag is undefined, telling the PDF viewer to use the last setting used with this particular
     * document, or to hide the sidebar if the document is opened for the first time.
     */
    showSidebarOnLoad: boolean | undefined;
    showFindButton: boolean;
    showPagingButtons: boolean;
    showZoomButtons: boolean;
    showPresentationModeButton: boolean;
    showOpenFileButton: boolean;
    showPrintButton: boolean;
    showDownloadButton: boolean;
    showBookmarkButton: boolean;
    showSecondaryToolbarButton: boolean;
    showRotateButton: boolean;
    handTool: boolean;
    showHandToolButton: boolean;
    showScrollingButton: boolean;
    showSpreadButton: boolean;
    showPropertiesButton: boolean;
    spread: 'off' | 'even' | 'odd';
    spreadChange: EventEmitter<"off" | "even" | "odd">;
    page: number | undefined;
    pageChange: EventEmitter<number>;
    pagesLoaded: EventEmitter<PagesLoadedEvent>;
    pageRendered: EventEmitter<PageRenderedEvent>;
    /** Legal values: undefined, 'auto', 'page-actual', 'page_fit', 'page-width', or '50' (or any other percentage) */
    zoom: string | number | undefined;
    zoomChange: EventEmitter<string | number>;
    /** This attributes allows you to increase the size of the UI elements so you can use them on small mobile devices.
     * This attribute is a string with a percent character at the end (e.g. "150%").
     */
    _mobileFriendlyZoom: string;
    toolbarWidth: string;
    findbarTop: string | undefined;
    findbarLeft: string | undefined;
    secondaryToolbarRight: string | undefined;
    /*
    * This attributes allows you to increase the size of the UI elements so you can use them on small mobile devices.
    * This attribute is a string with a percent character at the end (e.g. "150%").*/
    mobileFriendlyZoom: string;
    /** Deprecated. Please use [mobileFriendlyZoom] instead.
     * This attributes allows you to increase the size of the UI elements so you can use them on small mobile devices.
     * This attribute is a string with a percent character at the end (e.g. "150%").*/
    mobileZoom: string;
    sizeSelector: any;
    private _top;
    readonly sidebarPositionTop: string;
    calcViewerPositionTop(): void;
    constructor();
    emitZoomChange(): void;
    emitZoomChangeAfterDelay(): void;
    ngOnInit(): void;
    checkHeight(): void;
    onPageChange(): void;
    onSpreadChange(newSpread: 'off' | 'even' | 'odd'): void;
    private overrideDefaultSettings;
    private openPDF;
    private selectCursorTool;
    ngOnDestroy(): void;
    private isSecondaryMenuVisible;
    private isPrimaryMenuVisible;
    ngOnChanges(changes: SimpleChanges): void;
    private setZoom;
    onResize(): void;
    private doResize;
}
